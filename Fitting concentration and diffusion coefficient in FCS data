# -*- coding: utf-8 -*-
"""
Created on Mon Mar 03 21:22:24 2014

@author: Jaslin
"""

import numpy as np
from pandas import DataFrame, Series
from lmfit import minimize, Parameters
import pandas as pd
import math as m
import matplotlib.pyplot as plt
import sys
import os
import numpy as np

def g(b,t,data=None,sigma=None):
    C=b['C'].value
    D=b['D'].value
    wxy=b['wxy'].value
    wz=b['wz'].value
    v=wxy*wxy*wz*np.pi**1.5
    N=C*6.022e-1/v
    
    g=1+1/N/(1+4*D*t/wxy/wxy)/np.sqrt(1+4*D*t/wz/wz)
    if data is None:
        return g
    return (g-data)/sigma
    
def read_corrfile(file):
    f=open(file,'r')

    for line in f:
        if line.startswith('[Para'):
            break
    parameters=[]
    for line in f:
        if line.startswith('[Corr'):
            break
        parameters.append(line)
    corrfcts=[]
    for line in f:
        if line.startswith('[Raw'):
            break
        corrfcts.append([float(a) for a in line.split()])
    for line in f:
        if line.startswith('[IntensityHistory'):
            break
    intensity=[]
    for line in f:
        if line.startswith('[Overflow'):
            break
        if line.startswith('Trace'):
            trace=line
        else:
            intensity.append([float(a) for a in line.split()])
    f.close()
    return parameters,corrfcts,intensity
    
list = pd.read_table('B.txt')
first_str = list.filename.str.split('_').str.get(0)
file_seq = first_str.value_counts().sort_index()
concentration = list['conc(nM)'].value_counts().sort_index().index.values

patternfile = file_seq.index.values
occurence = file_seq.values
combinedarray = np.vstack([patternfile,occurence,concentration]).T


for i in range(len(patternfile)):
    corr_array=None           
    L=combinedarray[i][1]    #get values from second row of the array n times
    for p in range(L):
        p1 = str(p+1)
        file_name=combinedarray[i][0]+"_"+ p1 +".SIN"  #get the pattern and combine to create filename
        print file_name,combinedarray[i][2]            #print filename along with the conc. used
        para, corrfcts, intensity = read_corrfile(file_name)
        corrfcts=DataFrame(np.array(corrfcts[:-1]),columns=['delta_t','corrA','corrB','corrAB','corrBA'])
                    
        cropcorr=corrfcts[corrfcts['delta_t']>=1e-6]
        cropcorr=cropcorr[cropcorr['delta_t']<=0.1]
            
        if corr_array is None:
P            corr_array=np.vstack((cropcorr['corrAB'],cropcorr['corrBA']))
        else:
            corr_array=np.vstack((corr_array,cropcorr['corrAB'],cropcorr['corrBA']))
                
    corr_mean = np.mean(corr_array,axis=0)
    corr_std = np.std(corr_array,axis=0)
    conc = combinedarray[i][2]            
    C=float(conc)
    b=Parameters()
    b.add('C',value=C,vary=False)
    b.add('D',value=426.8,vary=False)
    b.add('wxy',value=0.25,vary=True)
    b.add('wz',value=0.4,vary=True)
                
    out=minimize(g,b,args=(cropcorr['delta_t'],corr_mean,corr_std))
                
    print b
    gfit=g(b,cropcorr['delta_t'])
    plt.figure()
    plt.title('Cross-correlation function')
    plt.errorbar(cropcorr['delta_t'],corr_mean,yerr=corr_std,fmt='o')
    plt.plot(cropcorr['delta_t'],gfit)
    plt.xscale('log')
    plt.xlabel('delta t in sec')
    plt.ylabel('g(t)')
    plt.show()
